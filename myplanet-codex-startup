#!/usr/bin/env bash
set -euo pipefail

REPO="open-learning-exchange/myplanet"
WORKDIR="/workspace/myplanet"
TOOLS="commandlinetools-linux-13114758_latest.zip"

# ----- Android SDK tools -----------------------------------------------------
wget -qO android-commandlinetools.zip "https://dl.google.com/android/repository/${TOOLS}"
mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
unzip -q android-commandlinetools.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
rm -f android-commandlinetools.zip
ln -sf "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/"* /usr/local/bin/
bash -c 'yes | sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0"'
bash -c 'yes | sdkmanager --licenses'
sdkmanager --version

# ----- QLTY CLI (optional) ---------------------------------------------------
# curl https://qlty.sh | sh

# ----- GitHub CLI ------------------------------------------------------------
if ! command -v gh >/dev/null 2>&1; then
  install -Dm644 \
    <(curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg) \
    /etc/apt/keyrings/githubcli-archive-keyring.gpg
  echo "deb [arch=$(dpkg --print-architecture) \
        signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] \
        https://cli.github.com/packages stable main" \
        > /etc/apt/sources.list.d/github-cli.list
  apt-get update -qq && apt-get install -y --no-install-recommends gh
fi

# ----- Git remotes (idempotent) ----------------------------------------------
mkdir -p "${WORKDIR}"
cd "${WORKDIR}"

# Initialize repo if missing
if [ ! -d .git ]; then
  git init
fi

# Add or update origin
git remote add origin "https://github.com/${REPO}.git" 2>/dev/null || \
git remote set-url origin "https://github.com/${REPO}.git"

# Set default for gh (best-effort)
gh repo set-default "${REPO}" || true

# Show remote
git remote -v

cd - >/dev/null

echo "✅  Android SDK + GitHub CLI + Git remote configured"

# ============================================================================ #
# NEW: Secrets + Connectivity Diagnostics (non-fatal, no builds)
#   - Reads keys from ENV or *_FILE
#   - Masks values
#   - Probes vendor endpoints (200/401 = reachable)
#   - Never exits non-zero
# ============================================================================ #
LOG="/tmp/api_keys_diag.log"
: > "$LOG"

mask4() { local v="${1:-}"; if [ -n "$v" ]; then printf "%s***" "${v:0:4}"; else printf "unset"; fi; }
get_secret() {
  # supports VAR or VAR_FILE (first 4KB, strip CR/LF)
  local name="$1" file_var="${1}_FILE" val="" f=""
  val="${!name-}"
  if [ -z "${val:-}" ] && [ -n "${!file_var-}" ]; then
    f="${!file_var}"; [ -r "$f" ] && val="$(head -c 4096 "$f" | tr -d '\r\n')" || val=""
  fi
  printf "%s" "${val:-}"
}

# Collect keys (don’t export; just for checks)
OPENAI_API_KEY="$(get_secret OPENAI_API_KEY)"
ANTHROPIC_API_KEY="$(get_secret ANTHROPIC_API_KEY)"
GEMINI_API_KEY="$(get_secret GEMINI_API_KEY)"
GOOGLE_API_KEY="$(get_secret GOOGLE_API_KEY)"
# Map Google → Gemini if needed (for diagnostics)
if [ -z "$GEMINI_API_KEY" ] && [ -n "$GOOGLE_API_KEY" ]; then
  GEMINI_API_KEY="$GOOGLE_API_KEY"
fi

{
  echo "== API Keys & Egress Diagnostics =="
  echo "Keys (masked):"
  printf "  OPENAI_API_KEY    = %s\n" "$(mask4 "$OPENAI_API_KEY")"
  printf "  ANTHROPIC_API_KEY = %s\n" "$(mask4 "$ANTHROPIC_API_KEY")"
  printf "  GEMINI_API_KEY    = %s\n" "$(mask4 "$GEMINI_API_KEY")"
  echo "Proxy envs:"
  printf "  HTTPS_PROXY=%s  HTTP_PROXY=%s  NO_PROXY=%s\n" \
    "${HTTPS_PROXY:+set}" "${HTTP_PROXY:+set}" "${NO_PROXY:+set}"

  echo "Reachability (expect 200/401 as 'reachable'):"
} | tee -a "$LOG"

# Curl probes (don’t fail script)
set +e
openai_code="$(curl -sS -m 8 -o /dev/null -w "%{http_code}" \
  -H "Authorization: Bearer ${OPENAI_API_KEY}" \
  https://api.openai.com/v1/models 2>>"$LOG")"
anthropic_code="$(curl -sS -m 8 -o /dev/null -w "%{http_code}" \
  -H "x-api-key: ${ANTHROPIC_API_KEY}" \
  -H "anthropic-version: 2023-06-01" \
  https://api.anthropic.com/v1/models 2>>"$LOG")"
gemini_code="$(curl -sS -m 8 -o /dev/null -w "%{http_code}" \
  "https://generativelanguage.googleapis.com/v1beta/models?key=${GEMINI_API_KEY}" 2>>"$LOG")"
set -e

{
  printf "  openai   = %s\n" "${openai_code:-000}"
  printf "  anthropic= %s\n" "${anthropic_code:-000}"
  printf "  gemini   = %s\n" "${gemini_code:-000}"
  echo ""
  echo "PASS/FAIL:"
  printf "  OpenAI   : %s\n" $([ -n "$OPENAI_API_KEY" ] && [[ "${openai_code:-}" =~ ^(200|401)$ ]] && echo PASS || echo FAIL)
  printf "  Anthropic: %s\n" $([ -n "$ANTHROPIC_API_KEY" ] && [[ "${anthropic_code:-}" =~ ^(200|401)$ ]] && echo PASS || echo FAIL)
  printf "  Gemini   : %s\n" $([ -n "$GEMINI_API_KEY" ] && [[ "${gemini_code:-}" =~ ^(200|401)$ ]] && echo PASS || echo FAIL)
  echo ""
  echo "Log saved to: $LOG"
} | tee -a "$LOG"
